var _user$project$SeatSaver$update = F2(
	function (msg, model) {
		var _p0 = msg;
		if (_p0.ctor === 'Toggle') {
			var updateSeat = function (seatFromModel) {
				return _elm_lang$core$Native_Utils.eq(seatFromModel.seatNo, _p0._0.seatNo) ? _elm_lang$core$Native_Utils.update(
					seatFromModel,
					{occupied: !seatFromModel.occupied}) : seatFromModel;
			};
			return {
				ctor: '_Tuple2',
				_0: A2(_elm_lang$core$List$map, updateSeat, model),
				_1: _elm_lang$core$Platform_Cmd$none
			};
		} else {
			if (_p0._0.ctor === 'Ok') {
				var _p2 = _p0._0._0;
				var _p1 = A2(_elm_lang$core$Debug$log, 'It worked', _p2);
				return {ctor: '_Tuple2', _0: _p2, _1: _elm_lang$core$Platform_Cmd$none};
			} else {
				var _p3 = A2(_elm_lang$core$Debug$log, 'Oops!', _p0._0._0);
				return {ctor: '_Tuple2', _0: model, _1: _elm_lang$core$Platform_Cmd$none};
			}
		}
	});
var _user$project$SeatSaver$initialModel = {ctor: '[]'};
var _user$project$SeatSaver$apiUrlPrefix = 'http://localhost:4000/api';
var _user$project$SeatSaver$seatsUrl = A2(_elm_lang$core$Basics_ops['++'], _user$project$SeatSaver$apiUrlPrefix, '/seats');
var _user$project$SeatSaver$Seat = F2(
	function (a, b) {
		return {seatNo: a, occupied: b};
	});
var _user$project$SeatSaver$seatDecoder = A3(
	_elm_lang$core$Json_Decode$map2,
	_user$project$SeatSaver$Seat,
	A2(_elm_lang$core$Json_Decode$field, 'seatNo', _elm_lang$core$Json_Decode$int),
	A2(_elm_lang$core$Json_Decode$field, 'occupied', _elm_lang$core$Json_Decode$bool));
var _user$project$SeatSaver$seatListDecoder = _elm_lang$core$Json_Decode$list(_user$project$SeatSaver$seatDecoder);
var _user$project$SeatSaver$getSeats = F2(
	function (msg, url) {
		return A2(
			_elm_lang$http$Http$send,
			msg,
			A2(_elm_lang$http$Http$get, url, _user$project$SeatSaver$seatListDecoder));
	});
var _user$project$SeatSaver$FetchSeats = function (a) {
	return {ctor: 'FetchSeats', _0: a};
};
var _user$project$SeatSaver$requestSeats = A2(_user$project$SeatSaver$getSeats, _user$project$SeatSaver$FetchSeats, _user$project$SeatSaver$seatsUrl);
var _user$project$SeatSaver$Toggle = function (a) {
	return {ctor: 'Toggle', _0: a};
};
var _user$project$SeatSaver$seatItem = function (seat) {
	var occupiedClass = seat.occupied ? 'occupied' : 'available';
	return A2(
		_elm_lang$html$Html$li,
		{
			ctor: '::',
			_0: _elm_lang$html$Html_Attributes$class(
				A2(_elm_lang$core$Basics_ops['++'], 'seat ', occupiedClass)),
			_1: {
				ctor: '::',
				_0: _elm_lang$html$Html_Events$onClick(
					_user$project$SeatSaver$Toggle(seat)),
				_1: {ctor: '[]'}
			}
		},
		{
			ctor: '::',
			_0: _elm_lang$html$Html$text(
				_elm_lang$core$Basics$toString(seat.seatNo)),
			_1: {ctor: '[]'}
		});
};
var _user$project$SeatSaver$view = function (model) {
	return A2(
		_elm_lang$html$Html$ul,
		{
			ctor: '::',
			_0: _elm_lang$html$Html_Attributes$class('seats'),
			_1: {ctor: '[]'}
		},
		A2(_elm_lang$core$List$map, _user$project$SeatSaver$seatItem, model));
};
var _user$project$SeatSaver$main = _elm_lang$html$Html$program(
	{
		init: {
			ctor: '_Tuple2',
			_0: _user$project$SeatSaver$initialModel,
			_1: A2(_user$project$SeatSaver$getSeats, _user$project$SeatSaver$FetchSeats, _user$project$SeatSaver$seatsUrl)
		},
		view: _user$project$SeatSaver$view,
		update: _user$project$SeatSaver$update,
		subscriptions: function (_p4) {
			return _elm_lang$core$Platform_Sub$none;
		}
	})();
